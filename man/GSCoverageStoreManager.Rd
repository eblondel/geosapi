% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GSCoverageStoreManager.R
\docType{class}
\name{GSCoverageStoreManager}
\alias{GSCoverageStoreManager}
\title{Geoserver REST API CoverageStore Manager}
\format{
\code{\link{R6Class}} object.
}
\value{
Object of \code{\link{R6Class}} with methods for managing GeoServer
CoverageStores (i.e. stores of coverage data)
}
\description{
Geoserver REST API CoverageStore Manager
}
\section{Constructor}{

\describe{
 \item{\code{new(url, user, pwd, logger)}}{
   This method is used to instantiate a GSManager with the \code{url} of the
   GeoServer and credentials to authenticate (\code{user}/\code{pwd}). By default,
   the \code{logger} argument will be set to \code{NULL} (no logger). This argument
   accepts two possible values: \code{INFO}: to print only geosapi logs,
   \code{DEBUG}: to print geosapi and CURL logs
 }
}
}

\section{\code{CoverageStore} methods}{

\describe{ 
 \item{\code{getCoverageStores(ws)}}{
   Get the list of available coverage stores. Returns an object of class \code{list}
   giving items of class \code{\link{GSAbstractCoverageStore}}
 }
 \item{\code{getCoverageStoreNames(ws)}}{
   Get the list of available coverage store names. Returns an vector of class \code{character}
 }
 \item{\code{getCoverageStore(ws, cs)}}{
   Get an object of class \code{\link{GSAbstractDataStore}} given a workspace and coverage store names.
 }
 \item{\code{createCoverageStore(ws, cs, endpoint, extension, filename, configure, update,contentType)}}{
   Creates a new coverage given a workspace, coverage store name. Abstract method used in below format-specific
   methods to create coverage stores.
 }
 \item{\code{createGeoTIFFCoverageStore(ws, cs, endpoint, filename, configure, update)}}{
   Creates a new GeoTIFF coverage given a workspace, coverage store name. The \code{endpoint} takes a value among
   \code{"file"} (default), \code{"url"} or \code{"external"}. The \code{filename} is the name of the GeoTIFF file to
   upload and set for the newly created datastore. The \code{configure} parameter can take a value among values 
   \code{"none"} (indicates to configure only the datastore but no layer configuration) or \code{"first"} (configure 
   both datastore and layer). The \code{update} defines the strategy for the upload: \code{"append"} (default value) for 
   the first upload, \code{"overwrite"} in case the file should be overwriten.
 }
 \item{\code{createWorldImageCoverageStore(ws, cs, endpoint, filename, configure, update)}}{
   Creates a new WorldImage coverage store given a workspace, coverage store name. The \code{endpoint} takes a value among
   \code{"file"} (default), \code{"url"} or \code{"external"}. The \code{filename} is the name of the zipped file to
   upload and set for the newly created datastore. It is assumed the zip archive contains the .prj file to set the SRS. 
   The \code{configure} parameter can take a value among values  \code{"none"} (indicates to configure only the datastore 
   but no layer configuration) or \code{"first"} (configure both datastore and layer). The \code{update} defines the strategy
   for the upload: \code{"append"} (default value) for the first upload, \code{"overwrite"} in case the file should be overwriten.
 }
 \item{\code{createArcGridCoverageStore(ws, cs, endpoint, filename, configure, update)}}{
   Creates a new ArcGrid coverage store given a workspace, coverage store name. The \code{endpoint} takes a value among
   \code{"file"} (default), \code{"url"} or \code{"external"}. The \code{filename} is the name of the ArcGrid file to
   upload and set for the newly created datastore. The \code{configure} parameter can take a value among values 
   \code{"none"} (indicates to configure only the datastore but no layer configuration) or \code{"first"} (configure 
   both datastore and layer). The \code{update} defines the strategy for the upload: \code{"append"} (default value) for 
   the first upload, \code{"overwrite"} in case the file should be overwriten.
 }
 \item{\code{createImageMosaicCoverageStore(ws, cs, endpoint, filename, configure, update)}}{
   Creates a new ImageMosaic coverage store given a workspace, coverage store name. The \code{endpoint} takes a value among
   \code{"file"} (default), \code{"url"} or \code{"external"}. The \code{filename} is the name of the ImageMosaic file to
   upload and set for the newly created datastore. The \code{configure} parameter can take a value among values 
   \code{"none"} (indicates to configure only the datastore but no layer configuration) or \code{"first"} (configure 
   both datastore and layer). The \code{update} defines the strategy for the upload: \code{"append"} (default value) for 
   the first upload, \code{"overwrite"} in case the file should be overwriten.
 }
 \item{\code{updateCoverageStore(ws, coverageStore)}}{
   Updates an existing coverage store given a workspace and an object of class \code{\link{GSAbstractCoverageStore}}
 }
 \item{\code{deleteCoverageStore(ws, cs, recurse, purge)}}{
   Deletes a coverage store given a workspace and an object of class \code{\link{GSCoverageStore}}.
   By defaut, the option \code{recurse} is set to FALSE, ie datastore layers are not removed.
   To remove all coverage store layers, set this option to TRUE. The \code{purge} parameter is used 
   to customize the delete of files on disk (in case the underlying reader implements a delete method). 
   It can take one of the three values: none, metadata, all. For more details see \link{https://docs.geoserver.org/stable/en/user/rest/api/coveragestores.html#purge}
 }
}
}

\section{\code{Coverages} methods}{

\describe{
 \item{\code{publishGeoTIFF(ws, cs, filename, update)}}{
   Configure an GeoTIFF coverage store, upload the GeoTIFF file and publish it as layer. The \code{update} defines 
   the strategy for the upload: \code{"append"} (default value) for the first upload, \code{"overwrite"} in case the file 
   should be overwriten.
 }
 \item{\code{publishWorldImage(ws, cs, filename, update)}}{
   Configure an WorldImage coverage store, upload the WorldImage file and publish it as layer. The \code{update} defines 
   the strategy for the upload: \code{"append"} (default value) for the first upload, \code{"overwrite"} in case the file 
   should be overwriten. It is assumed the file should be an zipped archive containing the .prj file to define the SRS.
 }
 \item{\code{publishArcGrid(ws, cs, filename, update)}}{
   Configure an ArcGrid coverage store, upload the ArcGrid file and publish it as layer. The \code{update} defines 
   the strategy for the upload: \code{"append"} (default value) for the first upload, \code{"overwrite"} in case the file 
   should be overwriten.
 }
 \item{\code{publishImageMosaic(ws, cs, filename, update)}}{
   Configure an ImageMosaic coverage store, upload the ImageMosaic zip file and publish it as layer. The \code{update} defines 
   the strategy for the upload: \code{"append"} (default value) for the first upload, \code{"overwrite"} in case the file 
   should be overwriten.
 }

}
}

\examples{
\dontrun{
   GSCoverageStoreManager$new("http://localhost:8080/geoserver", "admin", "geoserver")
 }

}
\author{
Emmanuel Blondel <emmanuel.blondel1@gmail.com>
}
\keyword{CoverageStore}
\keyword{api}
\keyword{geoserver}
\keyword{rest}
